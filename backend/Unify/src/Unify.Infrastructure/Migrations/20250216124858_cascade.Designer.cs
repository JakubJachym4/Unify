// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Unify.Infrastructure;

#nullable disable

namespace Unify.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250216124858_cascade")]
    partial class cascade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_role_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_role_user_users_id");

                    b.ToTable("role_user", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.Messages.InformationMessages.InformationMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<int>("SeverityLevel")
                        .HasColumnType("integer")
                        .HasColumnName("severity_level");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_information_messages");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_information_messages_sender_id");

                    b.ToTable("information_messages", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.Messages.InformationMessages.InformationMessageAttachments", b =>
                {
                    b.Property<Guid>("InformationMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("information_message_id");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("attachment_id");

                    b.HasKey("InformationMessageId", "AttachmentId")
                        .HasName("pk_information_message_attachments");

                    b.HasIndex("AttachmentId")
                        .HasDatabaseName("ix_information_message_attachments_attachment_id");

                    b.ToTable("information_message_attachments", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.Messages.InformationMessages.InformationMessageUser", b =>
                {
                    b.Property<Guid>("InformationMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("information_message_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("InformationMessageId", "UserId")
                        .HasName("pk_information_message_user");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_information_message_user_user_id");

                    b.ToTable("information_message_user", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.Messages.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("ForwardedFromMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("forwarded_from_message_id");

                    b.Property<Guid?>("RespondingToMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("responding_to_message_id");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_messages_sender_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.Messages.MessageAttachments", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("attachment_id");

                    b.HasKey("MessageId", "AttachmentId")
                        .HasName("pk_message_attachments");

                    b.HasIndex("AttachmentId")
                        .HasDatabaseName("ix_message_attachments_attachment_id");

                    b.ToTable("message_attachments", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.Messages.MessageUser", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("MessageId", "UserId")
                        .HasName("pk_messages_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_messages_users_user_id");

                    b.ToTable("messages_users", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<Guid?>("HomeworkAssignmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("homework_assignment_id");

                    b.Property<Guid?>("HomeworkSubmissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("homework_submission_id");

                    b.Property<Guid?>("course_resources_id")
                        .HasColumnType("uuid")
                        .HasColumnName("course_resources_id");

                    b.Property<Guid?>("offering_resources_id")
                        .HasColumnType("uuid")
                        .HasColumnName("offering_resources_id");

                    b.HasKey("Id")
                        .HasName("pk_attachments");

                    b.HasIndex("HomeworkAssignmentId")
                        .HasDatabaseName("ix_attachments_homework_assignment_id");

                    b.HasIndex("HomeworkSubmissionId")
                        .HasDatabaseName("ix_attachments_homework_submission_id");

                    b.HasIndex("course_resources_id")
                        .HasDatabaseName("ix_attachments_course_resources_id");

                    b.HasIndex("offering_resources_id")
                        .HasDatabaseName("ix_attachments_offering_resources_id");

                    b.ToTable("attachments", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.CourseResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_course_resources");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_course_resources_course_id");

                    b.ToTable("course_resources", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.HomeworkAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClassOfferingId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_offering_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("locked");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("title");

                    b.Property<Guid?>("homework_assignment_id")
                        .HasColumnType("uuid")
                        .HasColumnName("homework_assignment_id");

                    b.HasKey("Id")
                        .HasName("pk_homework_assignments");

                    b.HasIndex("ClassOfferingId")
                        .HasDatabaseName("ix_homework_assignments_class_offering_id");

                    b.HasIndex("homework_assignment_id")
                        .HasDatabaseName("ix_homework_assignments_homework_assignment_id");

                    b.ToTable("homework_assignments", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.HomeworkBasesAttachments", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("attachment_id");

                    b.Property<Guid>("HomeworkBaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("homework_base_id");

                    b.HasKey("AttachmentId", "HomeworkBaseId")
                        .HasName("pk_homework_bases_attachments");

                    b.ToTable("homework_bases_attachments", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.HomeworkSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Feedback")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("feedback");

                    b.Property<Guid>("HomeworkAssigmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("homework_assigment_id");

                    b.Property<Guid?>("HomeworkAssignmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("homework_assignment_id");

                    b.Property<Guid?>("MarkId")
                        .HasColumnType("uuid")
                        .HasColumnName("mark_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_on");

                    b.HasKey("Id")
                        .HasName("pk_homework_submissions");

                    b.HasIndex("HomeworkAssigmentId")
                        .HasDatabaseName("ix_homework_submissions_homework_assigment_id");

                    b.HasIndex("HomeworkAssignmentId")
                        .HasDatabaseName("ix_homework_submissions_homework_assignment_id");

                    b.HasIndex("MarkId")
                        .HasDatabaseName("ix_homework_submissions_mark_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_homework_submissions_student_id");

                    b.ToTable("homework_submissions", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.OfferingResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClassOfferingId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_offering_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_offering_resources");

                    b.HasIndex("ClassOfferingId")
                        .HasDatabaseName("ix_offering_resources_class_offering_id");

                    b.ToTable("offering_resources", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.UniversityClasses.ClassEnrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClassOfferingId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_offering_id");

                    b.Property<DateTime>("EnrolledOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrolled_on");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_id");

                    b.Property<Guid>("StudentGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_group_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_class_enrollments");

                    b.HasIndex("ClassOfferingId")
                        .HasDatabaseName("ix_class_enrollments_class_offering_id");

                    b.HasIndex("GradeId")
                        .HasDatabaseName("ix_class_enrollments_grade_id");

                    b.HasIndex("StudentGroupId")
                        .HasDatabaseName("ix_class_enrollments_student_group_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_class_enrollments_student_id");

                    b.ToTable("class_enrollments", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.UniversityClasses.ClassOffering", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("lecturer_id");

                    b.Property<int>("MaxStudentsCount")
                        .HasColumnType("integer")
                        .HasColumnName("max_students_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<Guid>("StudentGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_group_id");

                    b.HasKey("Id")
                        .HasName("pk_class_offerings");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_class_offerings_course_id");

                    b.HasIndex("LecturerId")
                        .HasDatabaseName("ix_class_offerings_lecturer_id");

                    b.HasIndex("StudentGroupId")
                        .HasDatabaseName("ix_class_offerings_student_group_id");

                    b.ToTable("class_offerings", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.UniversityClasses.ClassOfferingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClassOfferingId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_offering_id");

                    b.Property<int>("ClassType")
                        .HasColumnType("integer")
                        .HasColumnName("class_type");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("lecturer_id");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_class_offering_sessions");

                    b.HasIndex("ClassOfferingId")
                        .HasDatabaseName("ix_class_offering_sessions_class_offering_id");

                    b.HasIndex("LecturerId")
                        .HasDatabaseName("ix_class_offering_sessions_lecturer_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_class_offering_sessions_location_id");

                    b.ToTable("class_offering_sessions", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.UniversityClasses.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ClassType")
                        .HasColumnType("integer")
                        .HasColumnName("class_type");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("lecturer_id");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_lectures");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_lectures_course_id");

                    b.HasIndex("LecturerId")
                        .HasDatabaseName("ix_lectures_lecturer_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_lectures_location_id");

                    b.ToTable("lectures", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("description");

                    b.Property<Guid?>("LecturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("lecturer_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialization_id");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.HasIndex("LecturerId")
                        .HasDatabaseName("ix_courses_lecturer_id");

                    b.HasIndex("SpecializationId")
                        .HasDatabaseName("ix_courses_specialization_id");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_faculties");

                    b.ToTable("faculties", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.FieldOfStudy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)")
                        .HasColumnName("description");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculty_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_fields_of_study");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_fields_of_study_faculty_id");

                    b.ToTable("fields_of_study", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateAwarded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_awarded");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_grade");

                    b.ToTable("grade", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Building")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("building");

                    b.Property<string>("DoorNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("door_number");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculty_id");

                    b.Property<short?>("Floor")
                        .HasColumnType("smallint")
                        .HasColumnName("floor");

                    b.Property<string>("MeetingUrl")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("meeting_url");

                    b.Property<bool>("Online")
                        .HasColumnType("boolean")
                        .HasColumnName("online");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("street");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_locations_faculty_id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Criteria")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("criteria");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_id");

                    b.Property<bool>("HomeworkMark")
                        .HasColumnType("boolean")
                        .HasColumnName("homework_mark");

                    b.Property<decimal>("MaxScore")
                        .HasColumnType("numeric")
                        .HasColumnName("max_score");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric")
                        .HasColumnName("score");

                    b.Property<Guid?>("SubmissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("submission_id");

                    b.HasKey("Id")
                        .HasName("pk_marks");

                    b.HasIndex("GradeId")
                        .HasDatabaseName("ix_marks_grade_id");

                    b.ToTable("marks", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)")
                        .HasColumnName("description");

                    b.Property<Guid>("FieldOfStudyId")
                        .HasColumnType("uuid")
                        .HasColumnName("field_of_study_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_specializations");

                    b.HasIndex("FieldOfStudyId")
                        .HasDatabaseName("ix_specializations_field_of_study_id");

                    b.ToTable("specializations", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.StudentGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("MaxGroupSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_group_size");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("Semester")
                        .HasColumnType("integer")
                        .HasColumnName("semester");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialization_id");

                    b.Property<int>("StudyYear")
                        .HasColumnType("integer")
                        .HasColumnName("study_year");

                    b.Property<int>("Term")
                        .HasColumnType("integer")
                        .HasColumnName("term");

                    b.HasKey("Id")
                        .HasName("pk_student_group");

                    b.HasIndex("SpecializationId")
                        .HasDatabaseName("ix_student_group_specialization_id");

                    b.ToTable("student_group", (string)null);
                });

            modelBuilder.Entity("Unify.Domain.Users.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "users:read"
                        });
                });

            modelBuilder.Entity("Unify.Domain.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Registered"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Student"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lecturer"
                        });
                });

            modelBuilder.Entity("Unify.Domain.Users.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("Unify.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<Guid?>("SpecializationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialization_id");

                    b.Property<Guid?>("StudentGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_group_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_id");

                    b.HasIndex("SpecializationId")
                        .HasDatabaseName("ix_users_specialization_id");

                    b.HasIndex("StudentGroupId")
                        .HasDatabaseName("ix_users_student_group_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Unify.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_role_roles_id");

                    b.HasOne("Unify.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_user_users_id");
                });

            modelBuilder.Entity("Unify.Domain.Messages.InformationMessages.InformationMessage", b =>
                {
                    b.HasOne("Unify.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_information_messages_user_sender_id");
                });

            modelBuilder.Entity("Unify.Domain.Messages.InformationMessages.InformationMessageAttachments", b =>
                {
                    b.HasOne("Unify.Domain.OnlineResources.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_information_message_attachments_attachment_attachment_id");

                    b.HasOne("Unify.Domain.Messages.InformationMessages.InformationMessage", null)
                        .WithMany()
                        .HasForeignKey("InformationMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_information_message_attachments_information_messages_inform");
                });

            modelBuilder.Entity("Unify.Domain.Messages.InformationMessages.InformationMessageUser", b =>
                {
                    b.HasOne("Unify.Domain.Messages.InformationMessages.InformationMessage", null)
                        .WithMany()
                        .HasForeignKey("InformationMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_information_message_user_information_messages_information_m");

                    b.HasOne("Unify.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_information_message_user_user_user_id");
                });

            modelBuilder.Entity("Unify.Domain.Messages.Message", b =>
                {
                    b.HasOne("Unify.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_user_sender_id");
                });

            modelBuilder.Entity("Unify.Domain.Messages.MessageAttachments", b =>
                {
                    b.HasOne("Unify.Domain.OnlineResources.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_attachments_attachment_attachment_id");

                    b.HasOne("Unify.Domain.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_attachments_messages_message_id");
                });

            modelBuilder.Entity("Unify.Domain.Messages.MessageUser", b =>
                {
                    b.HasOne("Unify.Domain.Messages.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_users_messages_message_id");

                    b.HasOne("Unify.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_users_user_user_id");
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.Attachment", b =>
                {
                    b.HasOne("Unify.Domain.OnlineResources.HomeworkAssignment", null)
                        .WithMany("Attachments")
                        .HasForeignKey("HomeworkAssignmentId")
                        .HasConstraintName("fk_attachments_homework_assignment_homework_assignment_id");

                    b.HasOne("Unify.Domain.OnlineResources.HomeworkSubmission", null)
                        .WithMany("Attachments")
                        .HasForeignKey("HomeworkSubmissionId")
                        .HasConstraintName("fk_attachments_homework_submission_homework_submission_id");

                    b.HasOne("Unify.Domain.OnlineResources.CourseResource", null)
                        .WithMany("Files")
                        .HasForeignKey("course_resources_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_attachments_course_resources_course_resources_id");

                    b.HasOne("Unify.Domain.OnlineResources.OfferingResource", null)
                        .WithMany("Files")
                        .HasForeignKey("offering_resources_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_attachments_offering_resources_offering_resources_id");
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.CourseResource", b =>
                {
                    b.HasOne("Unify.Domain.UniversityCore.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_resources_course_course_id");
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.HomeworkAssignment", b =>
                {
                    b.HasOne("Unify.Domain.UniversityClasses.ClassOffering", null)
                        .WithMany()
                        .HasForeignKey("ClassOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_homework_assignments_class_offering_class_offering_id");

                    b.HasOne("Unify.Domain.OnlineResources.Attachment", null)
                        .WithMany()
                        .HasForeignKey("homework_assignment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_homework_assignments_attachments_homework_assignment_id");
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.HomeworkSubmission", b =>
                {
                    b.HasOne("Unify.Domain.OnlineResources.HomeworkAssignment", null)
                        .WithMany()
                        .HasForeignKey("HomeworkAssigmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_homework_submissions_homework_assignments_homework_assigmen");

                    b.HasOne("Unify.Domain.OnlineResources.HomeworkAssignment", null)
                        .WithMany("Submissions")
                        .HasForeignKey("HomeworkAssignmentId")
                        .HasConstraintName("fk_homework_submissions_homework_assignments_homework_assignme");

                    b.HasOne("Unify.Domain.UniversityCore.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarkId")
                        .HasConstraintName("fk_homework_submissions_mark_mark_id");

                    b.HasOne("Unify.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_homework_submissions_user_student_id");
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.OfferingResource", b =>
                {
                    b.HasOne("Unify.Domain.UniversityClasses.ClassOffering", null)
                        .WithMany()
                        .HasForeignKey("ClassOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_offering_resources_class_offering_class_offering_id");
                });

            modelBuilder.Entity("Unify.Domain.UniversityClasses.ClassEnrollment", b =>
                {
                    b.HasOne("Unify.Domain.UniversityClasses.ClassOffering", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_enrollments_class_offering_class_offering_id");

                    b.HasOne("Unify.Domain.UniversityCore.Grade", null)
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_enrollments_grade_grade_id");

                    b.HasOne("Unify.Domain.UniversityCore.StudentGroup", null)
                        .WithMany("ClassEnrollments")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_enrollments_student_group_student_group_id");

                    b.HasOne("Unify.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_enrollments_user_student_id");
                });

            modelBuilder.Entity("Unify.Domain.UniversityClasses.ClassOffering", b =>
                {
                    b.HasOne("Unify.Domain.UniversityCore.Course", null)
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_offerings_course_course_id");

                    b.HasOne("Unify.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_offerings_user_lecturer_id");

                    b.HasOne("Unify.Domain.UniversityCore.StudentGroup", null)
                        .WithMany()
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_offerings_student_group_student_group_id");
                });

            modelBuilder.Entity("Unify.Domain.UniversityClasses.ClassOfferingSession", b =>
                {
                    b.HasOne("Unify.Domain.UniversityClasses.ClassOffering", null)
                        .WithMany()
                        .HasForeignKey("ClassOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_offering_sessions_class_offerings_class_offering_id");

                    b.HasOne("Unify.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_offering_sessions_user_lecturer_id");

                    b.HasOne("Unify.Domain.UniversityCore.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_offering_sessions_location_location_id");
                });

            modelBuilder.Entity("Unify.Domain.UniversityClasses.Lecture", b =>
                {
                    b.HasOne("Unify.Domain.UniversityCore.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lectures_course_course_id");

                    b.HasOne("Unify.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lectures_user_lecturer_id");

                    b.HasOne("Unify.Domain.UniversityCore.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lectures_location_location_id");
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Course", b =>
                {
                    b.HasOne("Unify.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .HasConstraintName("fk_courses_user_lecturer_id");

                    b.HasOne("Unify.Domain.UniversityCore.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_courses_specialization_specialization_id");
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.FieldOfStudy", b =>
                {
                    b.HasOne("Unify.Domain.UniversityCore.Faculty", null)
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fields_of_study_faculties_faculty_id");
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Location", b =>
                {
                    b.HasOne("Unify.Domain.UniversityCore.Faculty", null)
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("fk_locations_faculties_faculty_id");
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Mark", b =>
                {
                    b.HasOne("Unify.Domain.UniversityCore.Grade", null)
                        .WithMany("Marks")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_marks_grade_grade_id");
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Specialization", b =>
                {
                    b.HasOne("Unify.Domain.UniversityCore.FieldOfStudy", null)
                        .WithMany()
                        .HasForeignKey("FieldOfStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specializations_fields_of_study_field_of_study_id");
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.StudentGroup", b =>
                {
                    b.HasOne("Unify.Domain.UniversityCore.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_group_specializations_specialization_id");
                });

            modelBuilder.Entity("Unify.Domain.Users.RolePermission", b =>
                {
                    b.HasOne("Unify.Domain.Users.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("Unify.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");
                });

            modelBuilder.Entity("Unify.Domain.Users.User", b =>
                {
                    b.HasOne("Unify.Domain.UniversityCore.Specialization", null)
                        .WithMany("Students")
                        .HasForeignKey("SpecializationId")
                        .HasConstraintName("fk_users_specializations_specialization_id");

                    b.HasOne("Unify.Domain.UniversityCore.StudentGroup", null)
                        .WithMany("Members")
                        .HasForeignKey("StudentGroupId")
                        .HasConstraintName("fk_users_student_group_student_group_id");
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.CourseResource", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.HomeworkAssignment", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.HomeworkSubmission", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Unify.Domain.OnlineResources.OfferingResource", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Unify.Domain.UniversityClasses.ClassOffering", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Course", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Grade", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.Specialization", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Unify.Domain.UniversityCore.StudentGroup", b =>
                {
                    b.Navigation("ClassEnrollments");

                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
